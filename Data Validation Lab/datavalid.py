# -*- coding: utf-8 -*-
"""DataValid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x84Pmhotslbrm0VLoYoc5c7Es1boCYc0
"""
# As stated agove made in colab, downloaded as a python file
import pandas as pd
import numpy as np
df = pd.read_csv("employees.csv")
print(df.columns)
print(df.index)
print(df['hire_date'].dtype)

#checks for number of empty name fields
exist1 = df[df['name'].isnull()]
print(len(exist1))

#checks for number of empty title fields
exist2 = df[df['title'].isnull()]
print(len(exist2))

#checks to see who if anyone was hired before 2015
mod = df['hire_date'].astype(str)
mod = mod.str.split('-', expand = True)
limit1 = mod[mod[0].astype(int) < 2015]
print(len(limit1))

#checks to see if anyone makes less than $10,000
limit2 = df[df['salary'].astype(int) < 10000]
print(len(limit2))

#checks to see if anyone was born before they were hired
mod = df
mod['hire_date'] = mod['hire_date'].astype(str)
mod['birth_date'] = mod['birth_date'].astype(str)
mod[['h_year', 'h_month', 'h_day']]  = mod['hire_date'].str.split('-', expand = True)
mod[['b_year', 'b_month', 'b_day']]  = mod['birth_date'].str.split('-', expand = True)
intra1 = mod[mod['h_year'].astype(int) <= mod['b_year'].astype(int)]
print(len(intra1))

#check to see if employees id is less than the report to id
intra2 = df[df['eid'].astype(int) < df['reports_to'].astype(int) ]
print(len(intra2))

#check to see if the report to id exists as an employee id
unq1 = df['reports_to'].unique()
unq2 = df['eid'].unique()
sec = np.intersect1d(unq1, unq2)
test1 = df['reports_to'].value_counts()
sum = 0
for x in sec:
  sum += test1[x]
print(sum)

#check to see if an employee's hire year matches another's birth year
mod = df
mod['hire_date'] = mod['hire_date'].astype(str)
mod['birth_date'] = mod['birth_date'].astype(str)
mod[['h_year', 'h_month', 'h_day']]  = mod['hire_date'].str.split('-', expand = True)
mod[['b_year', 'b_month', 'b_day']]  = mod['birth_date'].str.split('-', expand = True)
unq3 = mod['h_year'].astype(int).unique()
unq4 = mod['b_year'].astype(int).unique()
sec2 = np.intersect1d(unq3, unq4)
imp = mod['h_year'].value_counts()
count = 0
for x in sec2:
  count += imp[x.astype(str)]
print(count)

#check to see if any city has one employee
test = df['city'].value_counts()
test = test[test == 1]
print(len(test))
#check to see if there is any unquie hire year
mod = df
mod['hire_date'] = mod['hire_date'].astype(str)
mod[['h_year', 'h_month', 'h_day']]  = mod['hire_date'].str.split('-', expand = True)
test2 = mod['h_year'].value_counts()
test2 = test2[test2 == 1]
print(len(test2))

import matplotlib.pyplot as plt
#the salaries are normally distributed
df = pd.read_csv("employees.csv")
mod = df
mod['salary'] = mod['salary'].astype(int) / 1000
con = mod['salary']
#ax = con.plot(kind='hist', bins=10)
#print(con.describe())
con.plot(kind='hist', bins=100, log=True)
plt.yscale('log')
plt.show()

#the birth years are normally distrubuted
mod = df
mod['birth_date'] = mod['birth_date'].astype(str)
mod[['b_year', 'b_month', 'b_day']]  = mod['birth_date'].str.split('-', expand = True)
year = mod['b_year'].astype(int)
year.plot(kind='hist', bins=5)
plt.show()

